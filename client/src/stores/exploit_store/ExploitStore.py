import glob
import os

from common import Exploit
from config import Config
from loguru import logger


class ExploitStore:
    """
    A class for storing and managing a set of Exploit objects.

    Attributes:
        exploits (set[Exploit]): The set of Exploit objects stored in the store.
    """

    def __init__(self, config: Config):
        """Initialize an empty ExploitStore."""
        self.exploits = set()
        self.count = 0
        if config:
            self.load_init(config.exploit_dir)

    def add_exploit(self, exploit: Exploit) -> None:
        """
        Add an Exploit object to the store.

        Args:
            exploit (Exploit): The exploit to add to the store.
        """
        self.exploits.add(exploit)
        self.count += 1

    def load_init(self, exploit_dir: str) -> None:
        """
        Load the current exploits in the exploits folder.
        """
        for entry in glob.glob(exploit_dir + "/*"):
            if entry is not os.path.isdir:
                self.add_exploit(Exploit(os.path.basename(entry), entry))
                logger.debug(f"Loading {os.path.basename(entry)}")


    def remove_exploit(self, exploit: Exploit) -> None:
        """
        Remove an Exploit object from the store.

        Args:
            exploit (Exploit): The exploit to remove from the store.
        """
        self.exploits.remove(exploit)
        self.count -= 1

    def get_exploits(self) -> set[Exploit]:
        """
        Get the set of Exploit objects stored in the store.

        Returns:
            The set of Exploit objects stored in the store.
        """
        return self.exploits

    def find(self, path: str) -> Exploit:
        """
        Find the Exploit object in the store.

        Args:
            path (str): The full path of the exploit.

        Returns:
            The exploit at the given location or None
        """
        for exploit in self.exploits:
            if exploit.location == path:
                return exploit
            break
        else:
            return None

    def empty(self):
        """
        Return whether the store is empty or not.

        Returns:
            True if empty, False if nonempty.
        """
        return self.count == 0
